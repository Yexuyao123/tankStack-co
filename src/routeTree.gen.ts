/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PathlessLayoutRouteImport } from './routes/_pathlessLayout/route'
import { Route as appIndexImport } from './routes/(app)/index'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as PathlessLayoutNestedLayoutRouteImport } from './routes/_pathlessLayout/_nested-layout/route'
import { Route as appUsersRouteImport } from './routes/(app)/users/route'
import { Route as appPostsRouteImport } from './routes/(app)/posts/route'
import { Route as appUsersIndexImport } from './routes/(app)/users/index'
import { Route as appRedirectIndexImport } from './routes/(app)/redirect/index'
import { Route as appPostsIndexImport } from './routes/(app)/posts/index'
import { Route as appDeferredIndexImport } from './routes/(app)/deferred/index'
import { Route as PathlessLayoutNestedLayoutRouteBImport } from './routes/_pathlessLayout/_nested-layout/route-b'
import { Route as PathlessLayoutNestedLayoutRouteAImport } from './routes/_pathlessLayout/_nested-layout/route-a'
import { Route as appUsersUserIdImport } from './routes/(app)/users/$userId'
import { Route as appPostsPostIdIndexImport } from './routes/(app)/posts/$postId/index'
import { Route as appPostsPostIdDeepImport } from './routes/(app)/posts/$postId/deep'

// Create/Update Routes

const PathlessLayoutRouteRoute = PathlessLayoutRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const appIndexRoute = appIndexImport.update({
  id: '/(app)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutNestedLayoutRouteRoute =
  PathlessLayoutNestedLayoutRouteImport.update({
    id: '/_nested-layout',
    getParentRoute: () => PathlessLayoutRouteRoute,
  } as any)

const appUsersRouteRoute = appUsersRouteImport.update({
  id: '/(app)/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const appPostsRouteRoute = appPostsRouteImport.update({
  id: '/(app)/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const appUsersIndexRoute = appUsersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appUsersRouteRoute,
} as any)

const appRedirectIndexRoute = appRedirectIndexImport.update({
  id: '/(app)/redirect/',
  path: '/redirect/',
  getParentRoute: () => rootRoute,
} as any)

const appPostsIndexRoute = appPostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appPostsRouteRoute,
} as any)

const appDeferredIndexRoute = appDeferredIndexImport.update({
  id: '/(app)/deferred/',
  path: '/deferred/',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutNestedLayoutRouteBRoute =
  PathlessLayoutNestedLayoutRouteBImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessLayoutNestedLayoutRouteRoute,
  } as any)

const PathlessLayoutNestedLayoutRouteARoute =
  PathlessLayoutNestedLayoutRouteAImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessLayoutNestedLayoutRouteRoute,
  } as any)

const appUsersUserIdRoute = appUsersUserIdImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => appUsersRouteRoute,
} as any)

const appPostsPostIdIndexRoute = appPostsPostIdIndexImport.update({
  id: '/$postId/',
  path: '/$postId/',
  getParentRoute: () => appPostsRouteRoute,
} as any)

const appPostsPostIdDeepRoute = appPostsPostIdDeepImport.update({
  id: '/$postId/deep',
  path: '/$postId/deep',
  getParentRoute: () => appPostsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteImport
      parentRoute: typeof rootRoute
    }
    '/(app)/posts': {
      id: '/(app)/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof appPostsRouteImport
      parentRoute: typeof rootRoute
    }
    '/(app)/users': {
      id: '/(app)/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof appUsersRouteImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout/_nested-layout': {
      id: '/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteImport
      parentRoute: typeof PathlessLayoutRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)/users/$userId': {
      id: '/(app)/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof appUsersUserIdImport
      parentRoute: typeof appUsersRouteImport
    }
    '/_pathlessLayout/_nested-layout/route-a': {
      id: '/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteAImport
      parentRoute: typeof PathlessLayoutNestedLayoutRouteImport
    }
    '/_pathlessLayout/_nested-layout/route-b': {
      id: '/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteBImport
      parentRoute: typeof PathlessLayoutNestedLayoutRouteImport
    }
    '/(app)/deferred/': {
      id: '/(app)/deferred/'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof appDeferredIndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)/posts/': {
      id: '/(app)/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof appPostsIndexImport
      parentRoute: typeof appPostsRouteImport
    }
    '/(app)/redirect/': {
      id: '/(app)/redirect/'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof appRedirectIndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)/users/': {
      id: '/(app)/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof appUsersIndexImport
      parentRoute: typeof appUsersRouteImport
    }
    '/(app)/posts/$postId/deep': {
      id: '/(app)/posts/$postId/deep'
      path: '/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof appPostsPostIdDeepImport
      parentRoute: typeof appPostsRouteImport
    }
    '/(app)/posts/$postId/': {
      id: '/(app)/posts/$postId/'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof appPostsPostIdIndexImport
      parentRoute: typeof appPostsRouteImport
    }
  }
}

// Create and export the route tree

interface PathlessLayoutNestedLayoutRouteRouteChildren {
  PathlessLayoutNestedLayoutRouteARoute: typeof PathlessLayoutNestedLayoutRouteARoute
  PathlessLayoutNestedLayoutRouteBRoute: typeof PathlessLayoutNestedLayoutRouteBRoute
}

const PathlessLayoutNestedLayoutRouteRouteChildren: PathlessLayoutNestedLayoutRouteRouteChildren =
  {
    PathlessLayoutNestedLayoutRouteARoute:
      PathlessLayoutNestedLayoutRouteARoute,
    PathlessLayoutNestedLayoutRouteBRoute:
      PathlessLayoutNestedLayoutRouteBRoute,
  }

const PathlessLayoutNestedLayoutRouteRouteWithChildren =
  PathlessLayoutNestedLayoutRouteRoute._addFileChildren(
    PathlessLayoutNestedLayoutRouteRouteChildren,
  )

interface PathlessLayoutRouteRouteChildren {
  PathlessLayoutNestedLayoutRouteRoute: typeof PathlessLayoutNestedLayoutRouteRouteWithChildren
}

const PathlessLayoutRouteRouteChildren: PathlessLayoutRouteRouteChildren = {
  PathlessLayoutNestedLayoutRouteRoute:
    PathlessLayoutNestedLayoutRouteRouteWithChildren,
}

const PathlessLayoutRouteRouteWithChildren =
  PathlessLayoutRouteRoute._addFileChildren(PathlessLayoutRouteRouteChildren)

interface appPostsRouteRouteChildren {
  appPostsIndexRoute: typeof appPostsIndexRoute
  appPostsPostIdDeepRoute: typeof appPostsPostIdDeepRoute
  appPostsPostIdIndexRoute: typeof appPostsPostIdIndexRoute
}

const appPostsRouteRouteChildren: appPostsRouteRouteChildren = {
  appPostsIndexRoute: appPostsIndexRoute,
  appPostsPostIdDeepRoute: appPostsPostIdDeepRoute,
  appPostsPostIdIndexRoute: appPostsPostIdIndexRoute,
}

const appPostsRouteRouteWithChildren = appPostsRouteRoute._addFileChildren(
  appPostsRouteRouteChildren,
)

interface appUsersRouteRouteChildren {
  appUsersUserIdRoute: typeof appUsersUserIdRoute
  appUsersIndexRoute: typeof appUsersIndexRoute
}

const appUsersRouteRouteChildren: appUsersRouteRouteChildren = {
  appUsersUserIdRoute: appUsersUserIdRoute,
  appUsersIndexRoute: appUsersIndexRoute,
}

const appUsersRouteRouteWithChildren = appUsersRouteRoute._addFileChildren(
  appUsersRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof PathlessLayoutNestedLayoutRouteRouteWithChildren
  '/posts': typeof appPostsRouteRouteWithChildren
  '/users': typeof appUsersRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/': typeof appIndexRoute
  '/users/$userId': typeof appUsersUserIdRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/deferred': typeof appDeferredIndexRoute
  '/posts/': typeof appPostsIndexRoute
  '/redirect': typeof appRedirectIndexRoute
  '/users/': typeof appUsersIndexRoute
  '/posts/$postId/deep': typeof appPostsPostIdDeepRoute
  '/posts/$postId': typeof appPostsPostIdIndexRoute
}

export interface FileRoutesByTo {
  '': typeof PathlessLayoutNestedLayoutRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/': typeof appIndexRoute
  '/users/$userId': typeof appUsersUserIdRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/deferred': typeof appDeferredIndexRoute
  '/posts': typeof appPostsIndexRoute
  '/redirect': typeof appRedirectIndexRoute
  '/users': typeof appUsersIndexRoute
  '/posts/$postId/deep': typeof appPostsPostIdDeepRoute
  '/posts/$postId': typeof appPostsPostIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_pathlessLayout': typeof PathlessLayoutRouteRouteWithChildren
  '/(app)/posts': typeof appPostsRouteRouteWithChildren
  '/(app)/users': typeof appUsersRouteRouteWithChildren
  '/_pathlessLayout/_nested-layout': typeof PathlessLayoutNestedLayoutRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(app)/': typeof appIndexRoute
  '/(app)/users/$userId': typeof appUsersUserIdRoute
  '/_pathlessLayout/_nested-layout/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/_pathlessLayout/_nested-layout/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/(app)/deferred/': typeof appDeferredIndexRoute
  '/(app)/posts/': typeof appPostsIndexRoute
  '/(app)/redirect/': typeof appRedirectIndexRoute
  '/(app)/users/': typeof appUsersIndexRoute
  '/(app)/posts/$postId/deep': typeof appPostsPostIdDeepRoute
  '/(app)/posts/$postId/': typeof appPostsPostIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/posts'
    | '/users'
    | '/login'
    | '/'
    | '/users/$userId'
    | '/route-a'
    | '/route-b'
    | '/deferred'
    | '/posts/'
    | '/redirect'
    | '/users/'
    | '/posts/$postId/deep'
    | '/posts/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/login'
    | '/'
    | '/users/$userId'
    | '/route-a'
    | '/route-b'
    | '/deferred'
    | '/posts'
    | '/redirect'
    | '/users'
    | '/posts/$postId/deep'
    | '/posts/$postId'
  id:
    | '__root__'
    | '/_pathlessLayout'
    | '/(app)/posts'
    | '/(app)/users'
    | '/_pathlessLayout/_nested-layout'
    | '/(auth)/login'
    | '/(app)/'
    | '/(app)/users/$userId'
    | '/_pathlessLayout/_nested-layout/route-a'
    | '/_pathlessLayout/_nested-layout/route-b'
    | '/(app)/deferred/'
    | '/(app)/posts/'
    | '/(app)/redirect/'
    | '/(app)/users/'
    | '/(app)/posts/$postId/deep'
    | '/(app)/posts/$postId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PathlessLayoutRouteRoute: typeof PathlessLayoutRouteRouteWithChildren
  appPostsRouteRoute: typeof appPostsRouteRouteWithChildren
  appUsersRouteRoute: typeof appUsersRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  appIndexRoute: typeof appIndexRoute
  appDeferredIndexRoute: typeof appDeferredIndexRoute
  appRedirectIndexRoute: typeof appRedirectIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  PathlessLayoutRouteRoute: PathlessLayoutRouteRouteWithChildren,
  appPostsRouteRoute: appPostsRouteRouteWithChildren,
  appUsersRouteRoute: appUsersRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
  appIndexRoute: appIndexRoute,
  appDeferredIndexRoute: appDeferredIndexRoute,
  appRedirectIndexRoute: appRedirectIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_pathlessLayout",
        "/(app)/posts",
        "/(app)/users",
        "/(auth)/login",
        "/(app)/",
        "/(app)/deferred/",
        "/(app)/redirect/"
      ]
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout/route.tsx",
      "children": [
        "/_pathlessLayout/_nested-layout"
      ]
    },
    "/(app)/posts": {
      "filePath": "(app)/posts/route.tsx",
      "children": [
        "/(app)/posts/",
        "/(app)/posts/$postId/deep",
        "/(app)/posts/$postId/"
      ]
    },
    "/(app)/users": {
      "filePath": "(app)/users/route.tsx",
      "children": [
        "/(app)/users/$userId",
        "/(app)/users/"
      ]
    },
    "/_pathlessLayout/_nested-layout": {
      "filePath": "_pathlessLayout/_nested-layout/route.tsx",
      "parent": "/_pathlessLayout",
      "children": [
        "/_pathlessLayout/_nested-layout/route-a",
        "/_pathlessLayout/_nested-layout/route-b"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(app)/": {
      "filePath": "(app)/index.tsx"
    },
    "/(app)/users/$userId": {
      "filePath": "(app)/users/$userId.tsx",
      "parent": "/(app)/users"
    },
    "/_pathlessLayout/_nested-layout/route-a": {
      "filePath": "_pathlessLayout/_nested-layout/route-a.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    },
    "/_pathlessLayout/_nested-layout/route-b": {
      "filePath": "_pathlessLayout/_nested-layout/route-b.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    },
    "/(app)/deferred/": {
      "filePath": "(app)/deferred/index.tsx"
    },
    "/(app)/posts/": {
      "filePath": "(app)/posts/index.tsx",
      "parent": "/(app)/posts"
    },
    "/(app)/redirect/": {
      "filePath": "(app)/redirect/index.tsx"
    },
    "/(app)/users/": {
      "filePath": "(app)/users/index.tsx",
      "parent": "/(app)/users"
    },
    "/(app)/posts/$postId/deep": {
      "filePath": "(app)/posts/$postId/deep.tsx",
      "parent": "/(app)/posts"
    },
    "/(app)/posts/$postId/": {
      "filePath": "(app)/posts/$postId/index.tsx",
      "parent": "/(app)/posts"
    }
  }
}
ROUTE_MANIFEST_END */
